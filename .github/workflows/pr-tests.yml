name: PR Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: routinify_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start services
      run: |
        docker compose build backend
        docker compose up -d postgres
        docker compose up -d backend

    - name: Wait for services to be ready
      run: |
        docker compose exec -T postgres pg_isready -U postgres
        sleep 10

    - name: Setup database with ridgepole
      run: |
        docker compose exec -T backend bundle exec rails db:create
        echo "Database created successfully"
        docker compose exec -T backend bundle exec ridgepole --config ./config/database.yml --file ./db/Schemafile --dry-run
        echo "Ridgepole dry-run completed"
        docker compose exec -T backend bundle exec ridgepole --config ./config/database.yml --file ./db/Schemafile --apply
        echo "Ridgepole applied successfully"
        docker compose exec -T backend bundle exec rails db:schema:dump
        echo "Schema dumped successfully"
        docker compose exec -T backend bundle exec rails runner "puts ActiveRecord::Base.connection.tables"
        echo "Database tables listed above"

    - name: Run RSpec tests
      run: docker compose exec -T backend bundle exec rspec --format documentation

    - name: Run RuboCop (check)
      run: docker compose exec -T backend bundle exec rubocop --format progress --format offenses --out rubocop.txt

    - name: Run RuboCop (auto-correct)
      run: docker compose exec -T backend bundle exec rubocop --auto-correct --format progress

    - name: Run Brakeman security check
      run: docker compose exec -T backend bundle exec brakeman --no-progress --output-format json --output brakeman-report.json

    - name: Copy test results from container
      run: |
        docker compose cp backend:/app/rubocop.txt ./backend/rubocop.txt
        docker compose cp backend:/app/brakeman-report.json ./backend/brakeman-report.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/rubocop.txt
          backend/brakeman-report.json
        retention-days: 7

    - name: Stop services
      if: always()
      run: docker compose down

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install

    - name: Run tests
      working-directory: ./frontend
      run: pnpm test:run

    - name: Run type check
      working-directory: ./frontend
      run: pnpm tsc --noEmit

    - name: Run Prettier (check)
      working-directory: ./frontend
      run: pnpm format:check

    - name: Run Prettier (auto-fix)
      working-directory: ./frontend
      run: pnpm format

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: frontend/test-results/
        retention-days: 7

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend test results
      uses: actions/download-artifact@v4
      with:
        name: backend-test-results
        path: backend-results

    - name: Download frontend test results
      uses: actions/download-artifact@v4
      with:
        name: frontend-test-results
        path: frontend-results

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          frontend-results/test-results/
        comment_mode: create
        compare_to_earlier_commit: true 