name: PR Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-rspec:
    name: Backend RSpec Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start services
      run: |
        docker compose -f docker-compose.test.yml build --parallel backend
        docker compose -f docker-compose.test.yml up -d db
        docker compose -f docker-compose.test.yml up -d backend

    - name: Wait for services to be ready
      run: |
        docker compose -f docker-compose.test.yml exec -T db pg_isready -U postgres
        sleep 10

    - name: Setup database with ridgepole
      env:
        DATABASE_HOST: db
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: password
        RAILS_ENV: test
      run: |
        docker compose -f docker-compose.test.yml exec -T backend bundle exec rails db:create
        echo "Database created successfully"
        docker compose -f docker-compose.test.yml exec -T backend bundle exec ridgepole --config ./config/database.yml --file ./db/Schemafile --env test --apply
        echo "Ridgepole applied successfully"
        docker compose -f docker-compose.test.yml exec -T backend bundle exec rails db:schema:dump
        echo "Schema dumped successfully"
        docker compose -f docker-compose.test.yml exec -T backend bundle exec rails runner "puts ActiveRecord::Base.connection.tables"
        echo "Database tables listed above"

    - name: Run RSpec tests
      env:
        DATABASE_HOST: db
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: password
        RAILS_ENV: test
      run: docker compose -f docker-compose.test.yml exec -T backend bundle exec rspec --format progress --parallel --workers 4

    - name: Stop services
      if: always()
      run: docker compose -f docker-compose.test.yml down

  backend-lint:
    name: Backend Linting & Security
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend service
      run: docker compose -f docker-compose.test.yml build --parallel backend

    - name: Run RuboCop (check)
      run: docker compose -f docker-compose.test.yml run --rm backend bundle exec rubocop --format progress --format offenses --out rubocop.txt

    - name: Run RuboCop (auto-correct)
      run: docker compose -f docker-compose.test.yml run --rm backend bundle exec rubocop --auto-correct --format progress

    - name: Run Brakeman security check
      run: docker compose -f docker-compose.test.yml run --rm backend bundle exec brakeman --no-progress --format json --output brakeman-report.json

    - name: Copy test results from container
      run: |
        docker compose -f docker-compose.test.yml cp backend:/app/rubocop.txt ./backend/rubocop.txt
        docker compose -f docker-compose.test.yml cp backend:/app/brakeman-report.json ./backend/brakeman-report.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-lint-results
        path: |
          backend/rubocop.txt
          backend/brakeman-report.json
        retention-days: 7

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend service
      run: docker compose -f docker-compose.test.yml build frontend

    - name: Run tests
      run: |
        mkdir -p frontend/test-results
        docker compose -f docker-compose.test.yml run --rm frontend pnpm test:run

    - name: Run type check
      run: docker compose -f docker-compose.test.yml run --rm frontend pnpm tsc --noEmit

    - name: Run Prettier (check)
      run: docker compose -f docker-compose.test.yml run --rm frontend pnpm format:check

    - name: Run Prettier (auto-fix)
      run: docker compose -f docker-compose.test.yml run --rm frontend pnpm format

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/test-results/
        retention-days: 7

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-rspec, backend-lint, frontend-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend RSpec results
      uses: actions/download-artifact@v4
      with:
        name: backend-rspec-results
        path: backend-rspec-results

    - name: Download backend lint results
      uses: actions/download-artifact@v4
      with:
        name: backend-lint-results
        path: backend-lint-results

    - name: Download frontend test results
      uses: actions/download-artifact@v4
      with:
        name: frontend-test-results
        path: frontend-results

    - name: Display test results summary
      run: |
        echo "## Backend RSpec Tests" >> $GITHUB_STEP_SUMMARY
        echo "RSpec tests completed successfully." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Backend Linting & Security" >> $GITHUB_STEP_SUMMARY
        if [ -f "backend-lint-results/rubocop.txt" ]; then
          echo "### RuboCop Results" >> $GITHUB_STEP_SUMMARY
          cat backend-lint-results/rubocop.txt >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f "backend-lint-results/brakeman-report.json" ]; then
          echo "### Brakeman Security Scan Completed" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed successfully. Check the uploaded artifact for details." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -d "frontend-results/test-results" ]; then
          echo "### Test Results Directory Found" >> $GITHUB_STEP_SUMMARY
          ls -la frontend-results/test-results/ >> $GITHUB_STEP_SUMMARY
        else
          echo "### No test results directory found" >> $GITHUB_STEP_SUMMARY
        fi 